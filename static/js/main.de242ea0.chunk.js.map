{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","SystemProgram","web3","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","connectWallet","onInputChange","event","value","target","getProvider","connection","Connection","Provider","createGifAccount","provider","program","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","sendGif","length","addGif","useEffect","addEventListener","useCallback","account","fetch","className","href","onClick","type","placeholder","onChange","map","item","index","src","gifLink","alt","twitterLogo","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de242ea0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import { useEffect, useState, useCallback } from 'react';\nimport idl from './idl.json';\nimport kp from './keypair.json';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {\n  Program, Provider, web3\n} from '@project-serum/anchor';\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst { SystemProgram } = web3;\n\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\nconst programID = new PublicKey(idl.metadata.address);\nconst network = clusterApiUrl('devnet');\nconst opts = { preflightCommitment: 'processed' }\n\nconst App = () => {\n  \n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found.');\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          )\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found. Get a Phantom wallet ðŸ‘»');\n      }\n    } catch(e) {\n      console.log(e);\n    }\n  }\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  }\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  }\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log('ping');\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log('Created a new BaseAccount w/ address:', baseAccount.publicKey.toString());\n      await getGifList();\n    } catch(e) {\n      console.log('Error creating BaseAccount account:', e);\n    }\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length === 0)\n      return;\n\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n        },\n      });\n      console.log('GIF sent to program', inputValue);\n\n      await getGifList();\n    } catch(e) {\n      console.log('Error sending GIF:', e);\n    }\n  }\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      // program account hasn't been initialized\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"connected-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Enter gif link!\"\n            value={inputValue}\n            onChange={onInputChange} />\n          <button className=\"cta-button submit-gif-button\" onClick={sendGif}>\n            Submit\n          </button>\n          <div className=\"gif-grid\">\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} alt=\"item.gifLink\" />\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('load', async (event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  const getGifList = useCallback(async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log('Got the account', account);\n      setGifList(account.gifList);\n    } catch(e) {\n      console.log('Error in getGifs: ', e);\n      setGifList(null);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList();\n    }\n  }, [walletAddress, getGifList]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\n          <p className=\"sub-text\">\n            View your GIF collection in the Solana metaverse âœ¨\n          </p>\n          <p className=\"sub-text\">\n            Built by <a href=\"https://dantemonaldo.com\">Dante</a>.\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}